'use strict';
var async = require('async');
var assert = require('assert');
var DB = require('./').default;
var db = null;
describe('db-plugin', function () {
    before(function (done) {
        db = new DB('data');
        var createUser = function (id, callback) {
            db.put('test-doc-' + id, { name: 'test doc ' + id }).then(function (resp) {
                callback(null, resp);
            });
        };
        async.times(5, function (n, next) {
            createUser(n, function (err, user) {
                next(err, user);
            });
        }, function (err, users) {
            console.log('created', users);
            done();
        });
    });
    after(function () {
        db.close();
    });
    it('should be defined', function () {
        assert(DB);
    });
    it('should create instance', function () {
        assert(db);
    });
    it('put() - should do put', function (done) {
        db.put('test-doc', { name: 'db-plugin' }).then(function (resp) {
            assert(resp);
            done();
        });
    });
    it('get() - should get key value', function (done) {
        db.get('test-doc').then(function (resp) {
            assert(resp);
            done();
        });
    });
    it('find(params) - should return array', function (done) {
        db.find({}).then(function (resp) {
            assert(resp);
            done();
        });
    });
    it('remove() - should remove key value', function (done) {
        db.remove('test-doc').then(function (resp) {
            assert(resp);
            done();
        }).catch(function (err) {
            assert.fail(err);
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbnMvZGItcGx1Z2luL2RiLXNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2IsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqQyxJQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ2pDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQztBQUVkLFFBQVEsQ0FBQyxXQUFXLEVBQUU7SUFFbEIsTUFBTSxDQUFDLFVBQVUsSUFBSTtRQUNqQixFQUFFLEdBQUcsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEIsSUFBSSxVQUFVLEdBQUcsVUFBVSxFQUFFLEVBQUUsUUFBUTtZQUNuQyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxFQUFFLEVBQUUsRUFBQyxJQUFJLEVBQUUsV0FBVyxHQUFHLEVBQUUsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSTtnQkFDbEUsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN6QixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQztRQUNGLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLElBQUk7WUFDNUIsVUFBVSxDQUFDLENBQUMsRUFBRSxVQUFVLEdBQUcsRUFBRSxJQUFJO2dCQUM3QixJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFBO1lBQ25CLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxFQUFFLFVBQVUsR0FBRyxFQUFFLEtBQUs7WUFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDOUIsSUFBSSxFQUFFLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ0gsS0FBSyxDQUFDO1FBQ0YsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2YsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsbUJBQW1CLEVBQUU7UUFDcEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2YsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsd0JBQXdCLEVBQUU7UUFDekIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2YsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsdUJBQXVCLEVBQUUsVUFBVSxJQUFJO1FBQ3RDLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSTtZQUN2RCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDYixJQUFJLEVBQUUsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFHSCxFQUFFLENBQUMsOEJBQThCLEVBQUUsVUFBVSxJQUFJO1FBQzdDLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSTtZQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDYixJQUFJLEVBQUUsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsb0NBQW9DLEVBQUUsVUFBVSxJQUFJO1FBQ25ELEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSTtZQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDYixJQUFJLEVBQUUsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsb0NBQW9DLEVBQUUsVUFBVSxJQUFJO1FBQ25ELEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSTtZQUNyQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDYixJQUFJLEVBQUUsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUc7WUFDbEIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNqQixJQUFJLEVBQUUsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFHUCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJwbHVnaW5zL2RiLXBsdWdpbi9kYi1zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgYXN5bmMgPSByZXF1aXJlKCdhc3luYycpO1xuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5jb25zdCBEQiA9IHJlcXVpcmUoJy4vJykuZGVmYXVsdDtcbnZhciBkYiA9IG51bGw7XG5cbmRlc2NyaWJlKCdkYi1wbHVnaW4nLCBmdW5jdGlvbiAoKSB7XG5cbiAgICBiZWZvcmUoZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgZGIgPSBuZXcgREIoJ2RhdGEnKTtcbiAgICAgICAgdmFyIGNyZWF0ZVVzZXIgPSBmdW5jdGlvbiAoaWQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBkYi5wdXQoJ3Rlc3QtZG9jLScgKyBpZCwge25hbWU6ICd0ZXN0IGRvYyAnICsgaWR9KS50aGVuKGZ1bmN0aW9uIChyZXNwKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzcCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgYXN5bmMudGltZXMoNSwgZnVuY3Rpb24gKG4sIG5leHQpIHtcbiAgICAgICAgICAgIGNyZWF0ZVVzZXIobiwgZnVuY3Rpb24gKGVyciwgdXNlcikge1xuICAgICAgICAgICAgICAgIG5leHQoZXJyLCB1c2VyKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIsIHVzZXJzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnY3JlYXRlZCcsIHVzZXJzKTtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgYWZ0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICBkYi5jbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBiZSBkZWZpbmVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBhc3NlcnQoREIpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgaW5zdGFuY2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFzc2VydChkYik7XG4gICAgfSk7XG5cbiAgICBpdCgncHV0KCkgLSBzaG91bGQgZG8gcHV0JywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgZGIucHV0KCd0ZXN0LWRvYycsIHtuYW1lOiAnZGItcGx1Z2luJ30pLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHtcbiAgICAgICAgICAgIGFzc2VydChyZXNwKTtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cblxuICAgIGl0KCdnZXQoKSAtIHNob3VsZCBnZXQga2V5IHZhbHVlJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgZGIuZ2V0KCd0ZXN0LWRvYycpLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHtcbiAgICAgICAgICAgIGFzc2VydChyZXNwKTtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZmluZChwYXJhbXMpIC0gc2hvdWxkIHJldHVybiBhcnJheScsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgIGRiLmZpbmQoe30pLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHtcbiAgICAgICAgICAgIGFzc2VydChyZXNwKTtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgncmVtb3ZlKCkgLSBzaG91bGQgcmVtb3ZlIGtleSB2YWx1ZScsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgIGRiLnJlbW92ZSgndGVzdC1kb2MnKS50aGVuKGZ1bmN0aW9uIChyZXNwKSB7XG4gICAgICAgICAgICBhc3NlcnQocmVzcCk7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGFzc2VydC5mYWlsKGVycik7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG5cbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
