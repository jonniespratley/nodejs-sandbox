'use strict';
var _ = require('lodash');
//const db = require('../db-plugin')('db');
var Store = require('jfs');
var UserModel = (function () {
    function UserModel(obj) {
        for (var prop in obj) {
            this[prop] = obj[prop];
            console.log('UserModel', prop, '=', obj[prop]);
        }
        this.id = obj.id || _.uniqueId('user-');
    }
    return UserModel;
}());
exports.UserModel = UserModel;
var users = [
    { id: 1, name: 'watch', description: 'Tell time with this amazing watch', price: 30.00 },
    { id: 2, name: 'sandals', description: 'Walk in comfort with these sandals', price: 10.00 }
];
/**
 * @class         Users
 * @module        Users
 * @constructor
 */
var UsersService = (function () {
    function UsersService() {
        //this.users = db.sublevel('users');
        this.db = new Store('data', {
            // type: 'single',
            //  saveId: '_id',
            pretty: true
        });
        console.log('Service Constructor');
    }
    UsersService.prototype.getAsync = function (id) {
        return this.db.getAsync(id);
    };
    UsersService.prototype.get = function (id) {
        var _this = this;
        var self = this;
        return new Promise(function (resolve, reject) {
            console.log('get', id);
            _this.db.get(id, function (err, resp) {
                console.log('get', err, resp);
                if (err) {
                    reject(err);
                }
                resolve(resp);
            });
        });
    };
    UsersService.prototype.remove = function (id) {
        var _this = this;
        if (!id) {
            throw new Erorr('Must provide id!');
        }
        return new Promise(function (resolve, reject) {
            console.log('remove', id);
            _this.db.delete(id, function (err, resp) {
                console.log('remove', err, resp);
                if (err) {
                    reject(err);
                }
                resolve(true);
            });
        });
    };
    UsersService.prototype.save = function (obj) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            console.log('save', obj);
            _this.db.save(obj.id, obj, function (err, resp) {
                console.log('save', err, resp);
                if (err) {
                    reject(err);
                }
                resolve(resp);
            });
        });
    };
    UsersService.prototype.find = function (params) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            console.log('find', params);
            _this.db.all(function (err, resp) {
                if (err) {
                    reject(err);
                }
                resolve(resp);
            });
        });
    };
    UsersService.method2 = function () {
        console.log('method2');
    };
    return UsersService;
}());
exports.UsersService = UsersService;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbnMvdXNlcnMtbWlkZGxld2FyZS1wbHVnaW4vdXNlcnMtc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFDYixJQUFPLENBQUMsV0FBVyxRQUFRLENBQUMsQ0FBQztBQUU3QiwyQ0FBMkM7QUFDM0MsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRzdCO0lBRUksbUJBQVksR0FBTztRQUNmLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ25ELENBQUM7UUFDRCxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBQ0wsZ0JBQUM7QUFBRCxDQVRBLEFBU0MsSUFBQTtBQVRZLGlCQUFTLFlBU3JCLENBQUE7QUFFRCxJQUFJLEtBQUssR0FBRztJQUNSLEVBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQ0FBbUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO0lBQ3RGLEVBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxvQ0FBb0MsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO0NBQzVGLENBQUM7QUFHRjs7OztHQUlHO0FBQ0g7SUFNSTtRQUNJLG9DQUFvQztRQUNwQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUN6QixrQkFBa0I7WUFD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QUUsQ0FBQyxHQUFHLENBQUMsVUFBQyxHQUFHLEVBQUUsSUFBSTtnQkFDbEIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDTixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2hCLENBQUM7Z0JBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xCLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sb0JBQU8sR0FBZDtRQUNJLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUNMLG1CQUFDO0FBQUQsQ0E5RUEsQUE4RUMsSUFBQTtBQTlFWSxvQkFBWSxlQThFeEIsQ0FBQSIsImZpbGUiOiJwbHVnaW5zL3VzZXJzLW1pZGRsZXdhcmUtcGx1Z2luL3VzZXJzLXNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5pbXBvcnQgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4vL2NvbnN0IGRiID0gcmVxdWlyZSgnLi4vZGItcGx1Z2luJykoJ2RiJyk7XG5jb25zdCBTdG9yZSA9IHJlcXVpcmUoJ2pmcycpO1xuXG5cbmV4cG9ydCBjbGFzcyBVc2VyTW9kZWwge1xuICAgIGlkOnN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihvYmo6YW55KSB7XG4gICAgICAgIGZvciAobGV0IHByb3AgaW4gb2JqKSB7XG4gICAgICAgICAgICB0aGlzW3Byb3BdID0gb2JqW3Byb3BdO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1VzZXJNb2RlbCcsIHByb3AsICc9Jywgb2JqW3Byb3BdKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlkID0gb2JqLmlkIHx8IF8udW5pcXVlSWQoJ3VzZXItJyk7XG4gICAgfVxufVxuXG5sZXQgdXNlcnMgPSBbXG4gICAge2lkOiAxLCBuYW1lOiAnd2F0Y2gnLCBkZXNjcmlwdGlvbjogJ1RlbGwgdGltZSB3aXRoIHRoaXMgYW1hemluZyB3YXRjaCcsIHByaWNlOiAzMC4wMH0sXG4gICAge2lkOiAyLCBuYW1lOiAnc2FuZGFscycsIGRlc2NyaXB0aW9uOiAnV2FsayBpbiBjb21mb3J0IHdpdGggdGhlc2Ugc2FuZGFscycsIHByaWNlOiAxMC4wMH1cbl07XG5cblxuLyoqXG4gKiBAY2xhc3MgICAgICAgICBVc2Vyc1xuICogQG1vZHVsZSAgICAgICAgVXNlcnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5leHBvcnQgY2xhc3MgVXNlcnNTZXJ2aWNlIHtcbiAgICBuYW1lOnN0cmluZztcbiAgICBvcHRpb25zOm9iamVjdDtcbiAgICB1c2Vyczphbnk7XG4gICAgZGI6YW55O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vdGhpcy51c2VycyA9IGRiLnN1YmxldmVsKCd1c2VycycpO1xuICAgICAgICB0aGlzLmRiID0gbmV3IFN0b3JlKCdkYXRhJywge1xuICAgICAgICAgICAvLyB0eXBlOiAnc2luZ2xlJyxcbiAgICAgICAgICAvLyAgc2F2ZUlkOiAnX2lkJyxcbiAgICAgICAgICAgIHByZXR0eTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5sb2coJ1NlcnZpY2UgQ29uc3RydWN0b3InKTtcbiAgICB9XG5cbiAgICBnZXRBc3luYyhpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYi5nZXRBc3luYyhpZCk7XG4gICAgfVxuXG4gICAgZ2V0KGlkOmFueSkge1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdnZXQnLCBpZCk7XG4gICAgICAgICAgICB0aGlzLmRiLmdldChpZCwgKGVyciwgcmVzcCk9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2dldCcsIGVyciwgcmVzcCk7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW1vdmUoaWQ6YW55KSB7XG4gICAgICAgIGlmKCFpZCl7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJvcnIoJ011c3QgcHJvdmlkZSBpZCEnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygncmVtb3ZlJywgaWQpO1xuICAgICAgICAgICAgdGhpcy5kYi5kZWxldGUoaWQsIChlcnIsIHJlc3ApPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZW1vdmUnLCBlcnIsIHJlc3ApO1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2F2ZShvYmo6YW55KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzYXZlJywgb2JqKTtcbiAgICAgICAgICAgIHRoaXMuZGIuc2F2ZShvYmouaWQsIG9iaiwgKGVyciwgcmVzcCk9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3NhdmUnLCBlcnIsIHJlc3ApO1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZmluZChwYXJhbXM6YW55KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmaW5kJywgcGFyYW1zKTtcbiAgICAgICAgICAgIHRoaXMuZGIuYWxsKChlcnIsIHJlc3ApPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIG1ldGhvZDIoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdtZXRob2QyJyk7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
