'use strict';
//const db = require('../db-plugin')('db');
var Store = require('jfs');
var UserModel = require('./user-model').default;
var users = [
    { id: 1, name: 'watch', description: 'Tell time with this amazing watch', price: 30.00 },
    { id: 2, name: 'sandals', description: 'Walk in comfort with these sandals', price: 10.00 }
];
/**
 * @class         Users
 * @module        Users
 * @constructor
 */
var UsersService = (function () {
    function UsersService() {
        //this.users = db.sublevel('users');
        this.db = new Store('data', {
            // type: 'single',
            //  saveId: '_id',
            pretty: true
        });
        console.log('Service Constructor');
    }
    UsersService.prototype.getAsync = function (id) {
        return this.db.getAsync(id);
    };
    UsersService.prototype.get = function (id) {
        var _this = this;
        var self = this;
        return new Promise(function (resolve, reject) {
            console.log('get', id);
            _this.db.get(id, function (err, resp) {
                console.log('get', err, resp);
                if (err) {
                    reject(err);
                }
                resolve(resp);
            });
        });
    };
    UsersService.prototype.remove = function (id) {
        var _this = this;
        if (!id) {
            throw new Erorr('Must provide id!');
        }
        return new Promise(function (resolve, reject) {
            console.log('remove', id);
            _this.db.delete(id, function (err, resp) {
                console.log('remove', err, resp);
                if (err) {
                    reject(err);
                }
                resolve(true);
            });
        });
    };
    UsersService.prototype.save = function (obj) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            console.log('save', obj);
            _this.db.save(obj.id, obj, function (err, resp) {
                console.log('save', err, resp);
                if (err) {
                    reject(err);
                }
                resolve(resp);
            });
        });
    };
    UsersService.prototype.find = function (params) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            console.log('find', params);
            _this.db.all(function (err, resp) {
                if (err) {
                    reject(err);
                }
                resolve(resp);
            });
        });
    };
    UsersService.method2 = function () {
        console.log('method2');
    };
    return UsersService;
}());
exports.UsersService = UsersService;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbnMvdXNlcnMtbWlkZGxld2FyZS1wbHVnaW4vdXNlcnMtc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFHYiwyQ0FBMkM7QUFDM0MsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdCLElBQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFFbEQsSUFBSSxLQUFLLEdBQUc7SUFDUixFQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsbUNBQW1DLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztJQUN0RixFQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsb0NBQW9DLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztDQUM1RixDQUFDO0FBR0Y7Ozs7R0FJRztBQUNIO0lBTUk7UUFDSSxvQ0FBb0M7UUFDcEMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDekIsa0JBQWtCO1lBQ25CLGtCQUFrQjtZQUNoQixNQUFNLEVBQUUsSUFBSTtTQUNmLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsK0JBQVEsR0FBUixVQUFTLEVBQUU7UUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELDBCQUFHLEdBQUgsVUFBSSxFQUFNO1FBQVYsaUJBWUM7UUFYRyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEIsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFB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aWRkbGV3YXJlLXBsdWdpbi91c2Vycy1zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuLy9jb25zdCBkYiA9IHJlcXVpcmUoJy4uL2RiLXBsdWdpbicpKCdkYicpO1xuY29uc3QgU3RvcmUgPSByZXF1aXJlKCdqZnMnKTtcbmNvbnN0IFVzZXJNb2RlbCA9IHJlcXVpcmUoJy4vdXNlci1tb2RlbCcpLmRlZmF1bHQ7XG5cbmxldCB1c2VycyA9IFtcbiAgICB7aWQ6IDEsIG5hbWU6ICd3YXRjaCcsIGRlc2NyaXB0aW9uOiAnVGVsbCB0aW1lIHdpdGggdGhpcyBhbWF6aW5nIHdhdGNoJywgcHJpY2U6IDMwLjAwfSxcbiAgICB7aWQ6IDIsIG5hbWU6ICdzYW5kYWxzJywgZGVzY3JpcHRpb246ICdXYWxrIGluIGNvbWZvcnQgd2l0aCB0aGVzZSBzYW5kYWxzJywgcHJpY2U6IDEwLjAwfVxuXTtcblxuXG4vKipcbiAqIEBjbGFzcyAgICAgICAgIFVzZXJzXG4gKiBAbW9kdWxlICAgICAgICBVc2Vyc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmV4cG9ydCBjbGFzcyBVc2Vyc1NlcnZpY2Uge1xuICAgIG5hbWU6c3RyaW5nO1xuICAgIG9wdGlvbnM6b2JqZWN0O1xuICAgIHVzZXJzOmFueTtcbiAgICBkYjphbnk7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy90aGlzLnVzZXJzID0gZGIuc3VibGV2ZWwoJ3VzZXJzJyk7XG4gICAgICAgIHRoaXMuZGIgPSBuZXcgU3RvcmUoJ2RhdGEnLCB7XG4gICAgICAgICAgIC8vIHR5cGU6ICdzaW5nbGUnLFxuICAgICAgICAgIC8vICBzYXZlSWQ6ICdfaWQnLFxuICAgICAgICAgICAgcHJldHR5OiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmxvZygnU2VydmljZSBDb25zdHJ1Y3RvcicpO1xuICAgIH1cblxuICAgIGdldEFzeW5jKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiLmdldEFzeW5jKGlkKTtcbiAgICB9XG5cbiAgICBnZXQoaWQ6YW55KSB7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2dldCcsIGlkKTtcbiAgICAgICAgICAgIHRoaXMuZGIuZ2V0KGlkLCAoZXJyLCByZXNwKT0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZ2V0JywgZXJyLCByZXNwKTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3ApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlbW92ZShpZDphbnkpIHtcbiAgICAgICAgaWYoIWlkKXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcm9ycignTXVzdCBwcm92aWRlIGlkIScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZW1vdmUnLCBpZCk7XG4gICAgICAgICAgICB0aGlzLmRiLmRlbGV0ZShpZCwgKGVyciwgcmVzcCk9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlbW92ZScsIGVyciwgcmVzcCk7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzYXZlKG9iajphbnkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3NhdmUnLCBvYmopO1xuICAgICAgICAgICAgdGhpcy5kYi5zYXZlKG9iai5pZCwgb2JqLCAoZXJyLCByZXNwKT0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc2F2ZScsIGVyciwgcmVzcCk7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmaW5kKHBhcmFtczphbnkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZpbmQnLCBwYXJhbXMpO1xuICAgICAgICAgICAgdGhpcy5kYi5hbGwoKGVyciwgcmVzcCk9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgbWV0aG9kMigpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ21ldGhvZDInKTtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
