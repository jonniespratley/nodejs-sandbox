'use strict';
var UsersService = require('./users-service.js');
var UserModel = (function () {
    function UserModel(obj) {
        for (var prop in obj) {
            this[prop] = obj[prop];
            console.log('UserModel', prop, '=', obj[prop]);
        }
    }
    return UserModel;
}());
exports.UserModel = UserModel;
var users = [
    { id: 1, name: 'watch', description: 'Tell time with this amazing watch', price: 30.00 },
    { id: 2, name: 'sandals', description: 'Walk in comfort with these sandals', price: 10.00 }
];
/**
 * TODO - Describe what your controller does.
 *
 * @class         Users.Model
 * @module        Users
 * @constructor
 */
var UsersController = (function () {
    function UsersController(options) {
        this.users = new UsersService.UsersService();
        console.log('Controller Constructor');
    }
    UsersController.prototype.use = function (req, res, next) {
        console.log('Time: ', Date.now());
        console.log('users-controller.use', req.method, req.url);
        next();
    };
    UsersController.prototype.all = function (req, res, next) {
        if (req.params.id) {
            req.id = req.params.id;
            console.log('Got user id', req.id);
        }
        console.log('users-controller.all', req.method, req.url);
        next();
    };
    UsersController.prototype.index = function (req, res, next) {
        next();
    };
    UsersController.prototype.get_route = function (req, res, next) {
        if (req.params.id > (users.length - 1) || req.params.id < 0) {
            res.statusCode = 404;
            res.end('Not Found');
        }
        res.json(users[req.params.id]);
    };
    UsersController.prototype.post_route = function (req, res, next) {
        var model = new UserModel(req.body);
        model.id = users.length + 1;
        console.log('creating', model);
        users.push(model);
        res.json(model);
    };
    UsersController.prototype.put_route = function (req, res, next) {
        if (req.params.id > (users.length - 1) || req.params.id < 0) {
            res.statusCode = 404;
            res.end('No product found for that ID');
        }
        users[req.params.id] = req.body;
        res.json(req.body);
    };
    UsersController.prototype.delete_route = function (req, res, next) {
        if (!req.params.id) {
            req.status(404).json({ error: 'No user found for that ID' });
        }
        users.splice(req.param.id, 1);
        res.json(users);
    };
    return UsersController;
}());
exports.UsersController = UsersController;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbnMvdXNlcnMtbWlkZGxld2FyZS1wbHVnaW4vdXNlcnMtY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixJQUFPLFlBQVksV0FBVyxvQkFBb0IsQ0FBQyxDQUFDO0FBRXBEO0lBQ0ksbUJBQVksR0FBTztRQUNmLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ25ELENBQUM7SUFDTCxDQUFDO0lBQ0wsZ0JBQUM7QUFBRCxDQVBBLEFBT0MsSUFBQTtBQVBZLGlCQUFTLFlBT3JCLENBQUE7QUFFRCxJQUFJLEtBQUssR0FBRztJQUNSLEVBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQ0FBbUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO0lBQ3RGLEVBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxvQ0FBb0MsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO0NBQzVGLENBQUM7QUFFRjs7Ozs7O0dBTUc7QUFDSDtJQUdJLHlCQUFZLE9BQU87UUFDZixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsNkJBQUcsR0FBSCxVQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSTtRQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxH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QyxLQUFLLEVBQUUsMkJBQTJCLEVBQUMsQ0FBQyxDQUFBO1FBQzlELENBQUM7UUFDRCxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzlCLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUNMLHNCQUFDO0FBQUQsQ0E3REEsQUE2REMsSUFBQTtBQTdEWSx1QkFBZSxrQkE2RDNCLENBQUEiLCJmaWxlIjoicGx1Z2lucy91c2Vycy1taWRkbGV3YXJlLXBsdWdpbi91c2Vycy1jb250cm9sbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5pbXBvcnQgVXNlcnNTZXJ2aWNlID0gcmVxdWlyZSgnLi91c2Vycy1zZXJ2aWNlLmpzJyk7XG5cbmV4cG9ydCBjbGFzcyBVc2VyTW9kZWwge1xuICAgIGNvbnN0cnVjdG9yKG9iajphbnkpIHtcbiAgICAgICAgZm9yIChsZXQgcHJvcCBpbiBvYmopIHtcbiAgICAgICAgICAgIHRoaXNbcHJvcF0gPSBvYmpbcHJvcF07XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnVXNlck1vZGVsJywgcHJvcCwgJz0nLCBvYmpbcHJvcF0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5sZXQgdXNlcnMgPSBbXG4gICAge2lkOiAxLCBuYW1lOiAnd2F0Y2gnLCBkZXNjcmlwdGlvbjogJ1RlbGwgdGltZSB3aXRoIHRoaXMgYW1hemluZyB3YXRjaCcsIHByaWNlOiAzMC4wMH0sXG4gICAge2lkOiAyLCBuYW1lOiAnc2FuZGFscycsIGRlc2NyaXB0aW9uOiAnV2FsayBpbiBjb21mb3J0IHdpdGggdGhlc2Ugc2FuZGFscycsIHByaWNlOiAxMC4wMH1cbl07XG5cbi8qKlxuICogVE9ETyAtIERlc2NyaWJlIHdoYXQgeW91ciBjb250cm9sbGVyIGRvZXMuXG4gKlxuICogQGNsYXNzICAgICAgICAgVXNlcnMuTW9kZWxcbiAqIEBtb2R1bGUgICAgICAgIFVzZXJzXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZXhwb3J0IGNsYXNzIFVzZXJzQ29udHJvbGxlciB7XG4gICAgdXNlcnM6YW55O1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLnVzZXJzID0gbmV3IFVzZXJzU2VydmljZS5Vc2Vyc1NlcnZpY2UoKTtcbiAgICAgICAgY29uc29sZS5sb2coJ0NvbnRyb2xsZXIgQ29uc3RydWN0b3InKTtcbiAgICB9XG5cbiAgICB1c2UocmVxLCByZXMsIG5leHQpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1RpbWU6ICcsIERhdGUubm93KCkpO1xuICAgICAgICBjb25zb2xlLmxvZygndXNlcnMtY29udHJvbGxlci51c2UnLCByZXEubWV0aG9kLCByZXEudXJsKTtcbiAgICAgICAgbmV4dCgpO1xuICAgIH1cblxuICAgIGFsbChyZXEsIHJlcywgbmV4dCkge1xuICAgICAgICBpZiAocmVxLnBhcmFtcy5pZCkge1xuICAgICAgICAgICAgcmVxLmlkID0gcmVxLnBhcmFtcy5pZDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdHb3QgdXNlciBpZCcsIHJlcS5pZCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coJ3VzZXJzLWNvbnRyb2xsZXIuYWxsJywgcmVxLm1ldGhvZCwgcmVxLnVybCk7XG4gICAgICAgIG5leHQoKTtcbiAgICB9XG5cbiAgICBpbmRleChyZXEsIHJlcywgbmV4dCkge1xuICAgICAgICBuZXh0KCk7XG4gICAgfVxuXG4gICAgZ2V0X3JvdXRlKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgICAgIGlmIChyZXEucGFyYW1zLmlkID4gKHVzZXJzLmxlbmd0aCAtIDEpIHx8IHJlcS5wYXJhbXMuaWQgPCAwKSB7XG4gICAgICAgICAgICByZXMuc3RhdHVzQ29kZSA9IDQwNDtcbiAgICAgICAgICAgIHJlcy5lbmQoJ05vdCBGb3VuZCcpO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5qc29uKHVzZXJzW3JlcS5wYXJhbXMuaWRdKTtcbiAgICB9XG5cbiAgICBwb3N0X3JvdXRlKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgICAgIHZhciBtb2RlbCA9IG5ldyBVc2VyTW9kZWwocmVxLmJvZHkpO1xuICAgICAgICBtb2RlbC5pZCA9IHVzZXJzLmxlbmd0aCArIDE7XG4gICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgJ2NyZWF0aW5nJywgbW9kZWxcbiAgICAgICAgKTtcbiAgICAgICAgdXNlcnMucHVzaChtb2RlbCk7XG4gICAgICAgIHJlcy5qc29uKG1vZGVsKTtcbiAgICB9XG5cbiAgICBwdXRfcm91dGUocmVxLCByZXMsIG5leHQpIHtcbiAgICAgICAgaWYgKHJlcS5wYXJhbXMuaWQgPiAodXNlcnMubGVuZ3RoIC0gMSkgfHwgcmVxLnBhcmFtcy5pZCA8IDApIHtcbiAgICAgICAgICAgIHJlcy5zdGF0dXNDb2RlID0gNDA0O1xuICAgICAgICAgICAgcmVzLmVuZCgnTm8gcHJvZHVjdCBmb3VuZCBmb3IgdGhhdCBJRCcpO1xuICAgICAgICB9XG4gICAgICAgIHVzZXJzW3JlcS5wYXJhbXMuaWRdID0gcmVxLmJvZHk7XG4gICAgICAgIHJlcy5qc29uKHJlcS5ib2R5KTtcbiAgICB9XG5cbiAgICBkZWxldGVfcm91dGUocmVxLCByZXMsIG5leHQpIHtcbiAgICAgICAgaWYgKCFyZXEucGFyYW1zLmlkKSB7XG4gICAgICAgICAgICByZXEuc3RhdHVzKDQwNCkuanNvbih7ZXJyb3I6ICdObyB1c2VyIGZvdW5kIGZvciB0aGF0IElEJ30pXG4gICAgICAgIH1cbiAgICAgICAgdXNlcnMuc3BsaWNlKHJlcS5wYXJhbS5pZCwgMSk7XG4gICAgICAgIHJlcy5qc29uKHVzZXJzKTtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
