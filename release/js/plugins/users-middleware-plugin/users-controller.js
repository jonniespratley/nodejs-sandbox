'use strict';
var path = require('path');
var UserModel = require('./user-model.js').default;
var UsersService = require('./users-service.js').default;
var users = [
    { id: 1, name: 'watch', description: 'Tell time with this amazing watch', price: 30.00 },
    { id: 2, name: 'sandals', description: 'Walk in comfort with these sandals', price: 10.00 }
];
/**
 * TODO - Describe what your controller does.
 *
 * @class         Users.Model
 * @module        Users
 * @constructor
 */
var UsersController = (function () {
    function UsersController(options) {
        this.users = new UsersService();
        console.log('Controller Constructor');
    }
    UsersController.prototype.use = function (req, res, next) {
        console.log('Time: ', Date.now());
        console.log('users-controller.use', req.method, req.url);
        next();
    };
    UsersController.prototype.all = function (req, res, next) {
        if (req.params.id) {
            req.id = req.params.id;
            console.log('Got user id', req.id);
        }
        console.log('users-controller.all', req.method, req.url);
        next();
    };
    UsersController.prototype.index = function (req, res, next) {
        next();
    };
    UsersController.prototype.get_route = function (req, res, next) {
        if (req.params.id > (users.length - 1) || req.params.id < 0) {
            res.statusCode = 404;
            res.end('Not Found');
        }
        res.json(users[req.params.id]);
    };
    UsersController.prototype.post_route = function (req, res, next) {
        var model = new UserModel(req.body);
        model.id = users.length + 1;
        console.log('creating', model);
        users.push(model);
        res.json(model);
    };
    UsersController.prototype.put_route = function (req, res, next) {
        if (req.params.id > (users.length - 1) || req.params.id < 0) {
            res.statusCode = 404;
            res.end('No product found for that ID');
        }
        users[req.params.id] = req.body;
        res.json(req.body);
    };
    UsersController.prototype.delete_route = function (req, res, next) {
        if (!req.params.id) {
            req.status(404).json({ error: 'No user found for that ID' });
        }
        users.splice(req.param.id, 1);
        res.json(users);
    };
    return UsersController;
}());
exports["default"] = UsersController;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbnMvdXNlcnMtbWlkZGxld2FyZS1wbHVnaW4vdXNlcnMtY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFDYixJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0IsSUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ3JELElBQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUUzRCxJQUFJLEtBQUssR0FBRztJQUNSLEVBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQ0FBbUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO0lBQ3RGLEVBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxvQ0FBb0MsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO0NBQzVGLENBQUM7QUFJRjs7Ozs7O0dBTUc7QUFDSDtJQUdJLHlCQUFZLE9BQU87UUFDZixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCw2QkFBRyxHQUFILFVBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJO1FBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6RCxJQUFJLEVBQUUsQ0FBQztJQUNYLENBQUM7SUFFRCw2QkFBRyxHQUFILFVBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJO1FBQ2QsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLENBQUM7UUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pELElBQUksRUFBRSxDQUFDO0lBQ1gsQ0FBQztJQUVELCtCQUFLLEdBQUwsVUFBTSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUk7UUFDaEIsSUFBSSxFQUFFLENBQUM7SUFDWCxDQUFDO0lBRUQsbUNBQVMsR0FBVCxVQUFVLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSTtRQUNwQixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxRCxHQUFHLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztZQUNyQixHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3pCLENBQUM7UUFDRCxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELG9DQUFVLEdBQVYsVUFBVyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUk7UUFDckIsSUFBSSxLQUFLLEdBQUcsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BDLEtBQUssQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FDUCxVQUFVLEVBQUUsS0FBSyxDQUNwQixDQUFDO1FBQ0YsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxtQ0FBUyxHQUFULFVBQVUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJO1FBQ3BCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFELEdBQUcsQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO1lBQ3JCLEdBQUcsQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUM1QyxDQUFDO1FBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztRQUNoQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRUQsc0NBQVksR0FBWixVQUFhLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSTtRQUN2QixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNqQixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLEtBQUssRUFBRSwyQkFBMkIsRUFBQyxDQUFDLENBQUE7UUFDOUQsQ0FBQztRQUNELEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDOUIsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBQ0wsc0JBQUM7QUFBRCxDQTdEQSxBQTZEQyxJQUFBO0FBN0RELG9DQTZEQyxDQUFBIiwiZmlsZSI6InBsdWdpbnMvdXNlcnMtbWlkZGxld2FyZS1wbHVnaW4vdXNlcnMtY29udHJvbGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBVc2VyTW9kZWwgPSByZXF1aXJlKCcuL3VzZXItbW9kZWwuanMnKS5kZWZhdWx0O1xuY29uc3QgVXNlcnNTZXJ2aWNlID0gcmVxdWlyZSgnLi91c2Vycy1zZXJ2aWNlLmpzJykuZGVmYXVsdDtcblxubGV0IHVzZXJzID0gW1xuICAgIHtpZDogMSwgbmFtZTogJ3dhdGNoJywgZGVzY3JpcHRpb246ICdUZWxsIHRpbWUgd2l0aCB0aGlzIGFtYXppbmcgd2F0Y2gnLCBwcmljZTogMzAuMDB9LFxuICAgIHtpZDogMiwgbmFtZTogJ3NhbmRhbHMnLCBkZXNjcmlwdGlvbjogJ1dhbGsgaW4gY29tZm9ydCB3aXRoIHRoZXNlIHNhbmRhbHMnLCBwcmljZTogMTAuMDB9XG5dO1xuXG5cblxuLyoqXG4gKiBUT0RPIC0gRGVzY3JpYmUgd2hhdCB5b3VyIGNvbnRyb2xsZXIgZG9lcy5cbiAqXG4gKiBAY2xhc3MgICAgICAgICBVc2Vycy5Nb2RlbFxuICogQG1vZHVsZSAgICAgICAgVXNlcnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2Vyc0NvbnRyb2xsZXIge1xuICAgIHVzZXJzOmFueTtcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy51c2VycyA9IG5ldyBVc2Vyc1NlcnZpY2UoKTtcbiAgICAgICAgY29uc29sZS5sb2coJ0NvbnRyb2xsZXIgQ29uc3RydWN0b3InKTtcbiAgICB9XG5cbiAgICB1c2UocmVxLCByZXMsIG5leHQpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1RpbWU6ICcsIERhdGUubm93KCkpO1xuICAgICAgICBjb25zb2xlLmxvZygndXNlcnMtY29udHJvbGxlci51c2UnLCByZXEubWV0aG9kLCByZXEudXJsKTtcbiAgICAgICAgbmV4dCgpO1xuICAgIH1cblxuICAgIGFsbChyZXEsIHJlcywgbmV4dCkge1xuICAgICAgICBpZiAocmVxLnBhcmFtcy5pZCkge1xuICAgICAgICAgICAgcmVxLmlkID0gcmVxLnBhcmFtcy5pZDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdHb3QgdXNlciBpZCcsIHJlcS5pZCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coJ3VzZXJzLWNvbnRyb2xsZXIuYWxsJywgcmVxLm1ldGhvZCwgcmVxLnVybCk7XG4gICAgICAgIG5leHQoKTtcbiAgICB9XG5cbiAgICBpbmRleChyZXEsIHJlcywgbmV4dCkge1xuICAgICAgICBuZXh0KCk7XG4gICAgfVxuXG4gICAgZ2V0X3JvdXRlKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgICAgIGlmIChyZXEucGFyYW1zLmlkID4gKHVzZXJzLmxlbmd0aCAtIDEpIHx8IHJlcS5wYXJhbXMuaWQgPCAwKSB7XG4gICAgICAgICAgICByZXMuc3RhdHVzQ29kZSA9IDQwNDtcbiAgICAgICAgICAgIHJlcy5lbmQoJ05vdCBGb3VuZCcpO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5qc29uKHVzZXJzW3JlcS5wYXJhbXMuaWRdKTtcbiAgICB9XG5cbiAgICBwb3N0X3JvdXRlKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgICAgIHZhciBtb2RlbCA9IG5ldyBVc2VyTW9kZWwocmVxLmJvZHkpO1xuICAgICAgICBtb2RlbC5pZCA9IHVzZXJzLmxlbmd0aCArIDE7XG4gICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgJ2NyZWF0aW5nJywgbW9kZWxcbiAgICAgICAgKTtcbiAgICAgICAgdXNlcnMucHVzaChtb2RlbCk7XG4gICAgICAgIHJlcy5qc29uKG1vZGVsKTtcbiAgICB9XG5cbiAgICBwdXRfcm91dGUocmVxLCByZXMsIG5leHQpIHtcbiAgICAgICAgaWYgKHJlcS5wYXJhbXMuaWQgPiAodXNlcnMubGVuZ3RoIC0gMSkgfHwgcmVxLnBhcmFtcy5pZCA8IDApIHtcbiAgICAgICAgICAgIHJlcy5zdGF0dXNDb2RlID0gNDA0O1xuICAgICAgICAgICAgcmVzLmVuZCgnTm8gcHJvZHVjdCBmb3VuZCBmb3IgdGhhdCBJRCcpO1xuICAgICAgICB9XG4gICAgICAgIHVzZXJzW3JlcS5wYXJhbXMuaWRdID0gcmVxLmJvZHk7XG4gICAgICAgIHJlcy5qc29uKHJlcS5ib2R5KTtcbiAgICB9XG5cbiAgICBkZWxldGVfcm91dGUocmVxLCByZXMsIG5leHQpIHtcbiAgICAgICAgaWYgKCFyZXEucGFyYW1zLmlkKSB7XG4gICAgICAgICAgICByZXEuc3RhdHVzKDQwNCkuanNvbih7ZXJyb3I6ICdObyB1c2VyIGZvdW5kIGZvciB0aGF0IElEJ30pXG4gICAgICAgIH1cbiAgICAgICAgdXNlcnMuc3BsaWNlKHJlcS5wYXJhbS5pZCwgMSk7XG4gICAgICAgIHJlcy5qc29uKHVzZXJzKTtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
