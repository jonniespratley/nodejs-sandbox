'use strict';
var express = require('express');
var bodyParser = require('body-parser');
var UsersController = require('./users-controller.js');
/**
 * @class         Users
 * @module        Users
 * @constructor
 */
function routes() {
    console.log('Router Constructor');
    // curl -X GET http://localhost:3000/users/2
    // curl -X POST -d "name=flops&description=sandals&price=12.00" http://localhost:3000/users
    // curl -X PUT -d "name=flipflops&description=sandals&price=12.00" http://localhost:3000/users/3
    // curl -X DELETE http://localhost:3000/users/2
    var app = express();
    var controller = new UsersController.UsersController();
    var router = new express.Router();
    //error handler
    router.use(function (err, req, res, next) {
        console.error(err.stack);
        res.status(500).send('Something broke!');
    });
    router.all('/users/*', controller.all);
    router.get('/users', controller.get_route);
    router.get('/users/:id?', controller.get_route);
    router.delete('/users/:id', controller.delete_route);
    router.post('/users', bodyParser.json(), controller.post_route);
    router.put('/users/:id', bodyParser.json(), controller.put_route);
    router.use(controller.use);
    app.use(bodyParser.json());
    app.use('/', router);
    return app;
}
exports["default"] = routes;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbnMvdXNlcnMtbWlkZGxld2FyZS1wbHVnaW4vdXNlcnMtcm91dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUNiLElBQU8sT0FBTyxXQUFXLFNBQVMsQ0FBQyxDQUFDO0FBRXBDLElBQU8sVUFBVSxXQUFXLGFBQWEsQ0FBQyxDQUFDO0FBQzNDLElBQU8sZUFBZSxXQUFXLHVCQUF1QixDQUFDLENBQUM7QUFDMUQ7Ozs7R0FJRztBQUNIO0lBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ2xDLDRDQUE0QztJQUM1QywyRkFBMkY7SUFDL0YsZ0dBQWdHO0lBQ2hHLCtDQUErQztJQUMzQyxJQUFJLEdBQUcsR0FBRyxPQUFPLEVBQUUsQ0FBQztJQUNwQixJQUFJLFVBQVUsR0FBRyxJQUFJLGVBQWUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN2RCxJQUFJLE1BQU0sR0FBRyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUdsQyxlQUFlO0lBQ2YsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUk7UUFDcEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUM3QyxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUN0QyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDM0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQy9DLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUVwRCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsSUFBSSxFQUFFLEVBQUUsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQy9ELE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDakUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFM0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUMzQixHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNyQixNQUFNLENBQUMsR0FBRyxDQUFDO0FBQ2YsQ0FBQztBQTdCRCwyQkE2QkMsQ0FBQSIsImZpbGUiOiJwbHVnaW5zL3VzZXJzLW1pZGRsZXdhcmUtcGx1Z2luL3VzZXJzLXJvdXRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmltcG9ydCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5pbXBvcnQgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7XG5pbXBvcnQgVXNlcnNDb250cm9sbGVyID0gcmVxdWlyZSgnLi91c2Vycy1jb250cm9sbGVyLmpzJyk7XG4vKipcbiAqIEBjbGFzcyAgICAgICAgIFVzZXJzXG4gKiBAbW9kdWxlICAgICAgICBVc2Vyc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJvdXRlcygpIHtcbiAgICBjb25zb2xlLmxvZygnUm91dGVyIENvbnN0cnVjdG9yJyk7XG4gICAgLy8gY3VybCAtWCBHRVQgaHR0cDovL2xvY2FsaG9zdDozMDAwL3VzZXJzLzJcbiAgICAvLyBjdXJsIC1YIFBPU1QgLWQgXCJuYW1lPWZsb3BzJmRlc2NyaXB0aW9uPXNhbmRhbHMmcHJpY2U9MTIuMDBcIiBodHRwOi8vbG9jYWxob3N0OjMwMDAvdXNlcnNcbi8vIGN1cmwgLVggUFVUIC1kIFwibmFtZT1mbGlwZmxvcHMmZGVzY3JpcHRpb249c2FuZGFscyZwcmljZT0xMi4wMFwiIGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC91c2Vycy8zXG4vLyBjdXJsIC1YIERFTEVURSBodHRwOi8vbG9jYWxob3N0OjMwMDAvdXNlcnMvMlxuICAgIHZhciBhcHAgPSBleHByZXNzKCk7XG4gICAgdmFyIGNvbnRyb2xsZXIgPSBuZXcgVXNlcnNDb250cm9sbGVyLlVzZXJzQ29udHJvbGxlcigpO1xuICAgIHZhciByb3V0ZXIgPSBuZXcgZXhwcmVzcy5Sb3V0ZXIoKTtcblxuXG4gICAgLy9lcnJvciBoYW5kbGVyXG4gICAgcm91dGVyLnVzZShmdW5jdGlvbiAoZXJyLCByZXEsIHJlcywgbmV4dCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVyci5zdGFjayk7XG4gICAgICAgIHJlcy5zdGF0dXMoNTAwKS5zZW5kKCdTb21ldGhpbmcgYnJva2UhJyk7XG4gICAgfSk7XG5cbiAgICByb3V0ZXIuYWxsKCcvdXNlcnMvKicsIGNvbnRyb2xsZXIuYWxsKVxuICAgIHJvdXRlci5nZXQoJy91c2VycycsIGNvbnRyb2xsZXIuZ2V0X3JvdXRlKTtcbiAgICByb3V0ZXIuZ2V0KCcvdXNlcnMvOmlkPycsIGNvbnRyb2xsZXIuZ2V0X3JvdXRlKVxuICAgIHJvdXRlci5kZWxldGUoJy91c2Vycy86aWQnLCBjb250cm9sbGVyLmRlbGV0ZV9yb3V0ZSlcblxuICAgIHJvdXRlci5wb3N0KCcvdXNlcnMnLCBib2R5UGFyc2VyLmpzb24oKSwgY29udHJvbGxlci5wb3N0X3JvdXRlKVxuICAgIHJvdXRlci5wdXQoJy91c2Vycy86aWQnLCBib2R5UGFyc2VyLmpzb24oKSwgY29udHJvbGxlci5wdXRfcm91dGUpXG4gICAgcm91dGVyLnVzZShjb250cm9sbGVyLnVzZSk7XG5cbiAgICBhcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcbiAgICBhcHAudXNlKCcvJywgcm91dGVyKTtcbiAgICByZXR1cm4gYXBwO1xufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
