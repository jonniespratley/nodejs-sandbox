'use strict';
var express = require('express');
var bodyParser = require('body-parser');
var UsersController = require('./users-controller.js');
/**
 * @class         Users
 * @module        Users
 * @constructor
 */
function routes() {
    console.log('Router Constructor');
    // curl -X GET http://localhost:3000/users/2
    // curl -X POST -d "name=flops&description=sandals&price=12.00" http://localhost:3000/users
    // curl -X PUT -d "name=flipflops&description=sandals&price=12.00" http://localhost:3000/users/3
    // curl -X DELETE http://localhost:3000/users/2
    var app = express();
    var controller = new UsersController.UsersController();
    var router = new express.Router();
    //error handler
    router.use(function (err, req, res, next) {
        console.error(err.stack);
        res.status(500).send('Something broke!');
    });
    router.all('/users/*', controller.all);
    router.get('/users', controller.get_route);
    router.get('/users/:id?', controller.get_route);
    router.delete('/users/:id', controller.delete_route);
    router.post('/users', bodyParser.json(), controller.post_route);
    router.put('/users/:id', bodyParser.json(), controller.put_route);
    router.use(controller.use);
    app.use(bodyParser.json());
    app.use('/', router);
    return app;
}
exports["default"] = routes;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbnMvdXNlcnMtbWlkZGxld2FyZS1wbHVnaW4vdXNlcnMtcm91dGVyLnRzIl0sIm5hbWVzIjpbInJvdXRlcyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2IsSUFBTyxPQUFPLFdBQVcsU0FBUyxDQUFDLENBQUM7QUFFcEMsSUFBTyxVQUFVLFdBQVcsYUFBYSxDQUFDLENBQUM7QUFDM0MsSUFBTyxlQUFlLFdBQVcsdUJBQXVCLENBQUMsQ0FBQztBQUMxRDs7OztHQUlHO0FBQ0g7SUFDSUEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxDQUFDQTtJQUNsQ0EsNENBQTRDQTtJQUM1Q0EsMkZBQTJGQTtJQUMvRkEsZ0dBQWdHQTtJQUNoR0EsK0NBQStDQTtJQUMzQ0EsSUFBSUEsR0FBR0EsR0FBR0EsT0FBT0EsRUFBRUEsQ0FBQ0E7SUFDcEJBLElBQUlBLFVBQVVBLEdBQUdBLElBQUlBLGVBQWVBLENBQUNBLGVBQWVBLEVBQUVBLENBQUNBO0lBQ3ZEQSxJQUFJQSxNQUFNQSxHQUFHQSxJQUFJQSxPQUFPQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtJQUdsQ0EsZUFBZUE7SUFDZkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsVUFBVUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsSUFBSUE7UUFDcEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUM3QyxDQUFDLENBQUNBLENBQUNBO0lBRUhBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLFVBQVVBLEVBQUVBLFVBQVVBLENBQUNBLEdBQUdBLENBQUNBLENBQUFBO0lBQ3RDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxRQUFRQSxFQUFFQSxVQUFVQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtJQUMzQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsYUFBYUEsRUFBRUEsVUFBVUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQUE7SUFDL0NBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLFlBQVlBLEVBQUVBLFVBQVVBLENBQUNBLFlBQVlBLENBQUNBLENBQUFBO0lBRXBEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxVQUFVQSxDQUFDQSxJQUFJQSxFQUFFQSxFQUFFQSxVQUFVQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFBQTtJQUMvREEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsWUFBWUEsRUFBRUEsVUFBVUEsQ0FBQ0EsSUFBSUEsRUFBRUEsRUFBRUEsVUFBVUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQUE7SUFDakVBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLFVBQVVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO0lBRTNCQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFDQTtJQUMzQkEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0E7SUFDckJBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO0FBQ2ZBLENBQUNBO0FBN0JELDJCQTZCQyxDQUFBIiwiZmlsZSI6InBsdWdpbnMvdXNlcnMtbWlkZGxld2FyZS1wbHVnaW4vdXNlcnMtcm91dGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmltcG9ydCBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKTtcbmltcG9ydCBVc2Vyc0NvbnRyb2xsZXIgPSByZXF1aXJlKCcuL3VzZXJzLWNvbnRyb2xsZXIuanMnKTtcbi8qKlxuICogQGNsYXNzICAgICAgICAgVXNlcnNcbiAqIEBtb2R1bGUgICAgICAgIFVzZXJzXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm91dGVzKCkge1xuICAgIGNvbnNvbGUubG9nKCdSb3V0ZXIgQ29uc3RydWN0b3InKTtcbiAgICAvLyBjdXJsIC1YIEdFVCBodHRwOi8vbG9jYWxob3N0OjMwMDAvdXNlcnMvMlxuICAgIC8vIGN1cmwgLVggUE9TVCAtZCBcIm5hbWU9ZmxvcHMmZGVzY3JpcHRpb249c2FuZGFscyZwcmljZT0xMi4wMFwiIGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC91c2Vyc1xuLy8gY3VybCAtWCBQVVQgLWQgXCJuYW1lPWZsaXBmbG9wcyZkZXNjcmlwdGlvbj1zYW5kYWxzJnByaWNlPTEyLjAwXCIgaHR0cDovL2xvY2FsaG9zdDozMDAwL3VzZXJzLzNcbi8vIGN1cmwgLVggREVMRVRFIGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC91c2Vycy8yXG4gICAgdmFyIGFwcCA9IGV4cHJlc3MoKTtcbiAgICB2YXIgY29udHJvbGxlciA9IG5ldyBVc2Vyc0NvbnRyb2xsZXIuVXNlcnNDb250cm9sbGVyKCk7XG4gICAgdmFyIHJvdXRlciA9IG5ldyBleHByZXNzLlJvdXRlcigpO1xuXG5cbiAgICAvL2Vycm9yIGhhbmRsZXJcbiAgICByb3V0ZXIudXNlKGZ1bmN0aW9uIChlcnIsIHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLnN0YWNrKTtcbiAgICAgICAgcmVzLnN0YXR1cyg1MDApLnNlbmQoJ1NvbWV0aGluZyBicm9rZSEnKTtcbiAgICB9KTtcblxuICAgIHJvdXRlci5hbGwoJy91c2Vycy8qJywgY29udHJvbGxlci5hbGwpXG4gICAgcm91dGVyLmdldCgnL3VzZXJzJywgY29udHJvbGxlci5nZXRfcm91dGUpO1xuICAgIHJvdXRlci5nZXQoJy91c2Vycy86aWQ/JywgY29udHJvbGxlci5nZXRfcm91dGUpXG4gICAgcm91dGVyLmRlbGV0ZSgnL3VzZXJzLzppZCcsIGNvbnRyb2xsZXIuZGVsZXRlX3JvdXRlKVxuXG4gICAgcm91dGVyLnBvc3QoJy91c2VycycsIGJvZHlQYXJzZXIuanNvbigpLCBjb250cm9sbGVyLnBvc3Rfcm91dGUpXG4gICAgcm91dGVyLnB1dCgnL3VzZXJzLzppZCcsIGJvZHlQYXJzZXIuanNvbigpLCBjb250cm9sbGVyLnB1dF9yb3V0ZSlcbiAgICByb3V0ZXIudXNlKGNvbnRyb2xsZXIudXNlKTtcblxuICAgIGFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuICAgIGFwcC51c2UoJy8nLCByb3V0ZXIpO1xuICAgIHJldHVybiBhcHA7XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
