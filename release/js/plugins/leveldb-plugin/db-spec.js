'use strict';
var assert = require('assert');
var DB = require('./').default;
var db = null;
describe('leveldb-plugin', function () {
    before(function () {
        db = new DB('db');
    });
    after(function () {
        db.close();
    });
    it('should be defined', function () {
        assert(DB);
    });
    it('should create instance', function () {
        assert(db);
    });
    it('put() - should do put', function (done) {
        db.put('name', 'LevelUP', function (err) {
            if (err) {
                console.log('Ooops!', err);
                assert.fail(err);
                done();
            }
            done();
        });
    });
    it('createValueStream() - should get stream', function (done) {
        db.createValueStream().on('data', function (data) {
            assert(data);
            console.log('value=', data);
        });
        db.put('user-jonnie', 'jonnie', function (err) {
            done();
        });
    });
    it('get() - should get key value', function (done) {
        db.get('name', function (err, value) {
            assert(value);
            done();
        });
    });
    it('del() - should remove key value', function (done) {
        db.del('name', function (err, value) {
            assert(true);
            done();
        });
    });
    it('batch() - should do batch operation', function (done) {
        var ops = [
            { type: 'put', key: 'name', value: 'Yuri Irsenovich Kim' },
            { type: 'put', key: 'dob', value: '16 February 1941' },
            { type: 'put', key: 'spouse', value: 'Kim Young-sook' },
            { type: 'put', key: 'occupation', value: 'Clown' }
        ];
        db.batch(ops, function (err) {
            if (err) {
                assert.fail(err);
                done();
            }
            assert(true);
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbnMvbGV2ZWxkYi1wbHVnaW4vZGItc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFDYixJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDakMsSUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUNqQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUM7QUFHZCxRQUFRLENBQUMsZ0JBQWdCLEVBQUU7SUFFdkIsTUFBTSxDQUFDO1FBQ0gsRUFBRSxHQUFHLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RCLENBQUMsQ0FBQyxDQUFDO0lBQ0gsS0FBSyxDQUFDO1FBQ0YsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2YsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsbUJBQW1CLEVBQUU7UUFDcEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2YsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsd0JBQXdCLEVBQUU7UUFDekIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2YsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsdUJBQXVCLEVBQUUsVUFBVSxJQUFJO1FBQ3RDLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxVQUFVLEdBQUc7WUFDbkMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDTixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDakIsSUFBSSxFQUFFLENBQUM7WUFDWCxDQUFDO1lBQ0QsSUFBSSxFQUFFLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHlDQUF5QyxFQUFFLFVBQVUsSUFBSTtRQUN4RCxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLFVBQVUsSUFBSTtZQUM1QyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxVQUFVLEdBQUc7WUFDekMsSUFBSSxFQUFFLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQztJQUVQLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDhCQUE4QixFQUFFLFVBQVUsSUFBSTtRQUM3QyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxVQUFVLEdBQUcsRUFBRSxLQUFLO1lBRS9CLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNkLElBQUksRUFBRSxDQUFDO1FBQ1gsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRSxVQUFVLElBQUk7UUFDaEQsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsVUFBVSxHQUFHLEVBQUUsS0FBSztZQUUvQixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDYixJQUFJLEVBQUUsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMscUNBQXFDLEVBQUUsVUFBVSxJQUFJO1FBQ3BELElBQUksR0FBRyxHQUFHO1lBQ04sRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLHFCQUFxQixFQUFDO1lBQ3hELEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxrQkFBa0IsRUFBQztZQUNwRCxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUM7WUFDckQsRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBQztTQUNuRCxDQUFDO1FBRUYsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsVUFBVSxHQUFHO1lBQ3ZCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDakIsSUFBSSxFQUFFLENBQUM7WUFDWCxDQUFDO1lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2IsSUFBSSxFQUFFLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoicGx1Z2lucy9sZXZlbGRiLXBsdWdpbi9kYi1zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5jb25zdCBEQiA9IHJlcXVpcmUoJy4vJykuZGVmYXVsdDtcbnZhciBkYiA9IG51bGw7XG5cblxuZGVzY3JpYmUoJ2xldmVsZGItcGx1Z2luJywgZnVuY3Rpb24gKCkge1xuXG4gICAgYmVmb3JlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGIgPSBuZXcgREIoJ2RiJyk7XG4gICAgfSk7XG4gICAgYWZ0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICBkYi5jbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBiZSBkZWZpbmVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBhc3NlcnQoREIpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgaW5zdGFuY2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFzc2VydChkYik7XG4gICAgfSk7XG5cbiAgICBpdCgncHV0KCkgLSBzaG91bGQgZG8gcHV0JywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgZGIucHV0KCduYW1lJywgJ0xldmVsVVAnLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ09vb3BzIScsIGVycik7XG4gICAgICAgICAgICAgICAgYXNzZXJ0LmZhaWwoZXJyKTtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2NyZWF0ZVZhbHVlU3RyZWFtKCkgLSBzaG91bGQgZ2V0IHN0cmVhbScsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgIGRiLmNyZWF0ZVZhbHVlU3RyZWFtKCkub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgYXNzZXJ0KGRhdGEpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3ZhbHVlPScsIGRhdGEpO1xuICAgICAgICB9KTtcblxuICAgICAgICBkYi5wdXQoJ3VzZXItam9ubmllJywgJ2pvbm5pZScsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSk7XG5cbiAgICB9KTtcblxuICAgIGl0KCdnZXQoKSAtIHNob3VsZCBnZXQga2V5IHZhbHVlJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgZGIuZ2V0KCduYW1lJywgZnVuY3Rpb24gKGVyciwgdmFsdWUpIHtcblxuICAgICAgICAgICAgYXNzZXJ0KHZhbHVlKTtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGVsKCkgLSBzaG91bGQgcmVtb3ZlIGtleSB2YWx1ZScsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgIGRiLmRlbCgnbmFtZScsIGZ1bmN0aW9uIChlcnIsIHZhbHVlKSB7XG5cbiAgICAgICAgICAgIGFzc2VydCh0cnVlKTtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnYmF0Y2goKSAtIHNob3VsZCBkbyBiYXRjaCBvcGVyYXRpb24nLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICB2YXIgb3BzID0gW1xuICAgICAgICAgICAge3R5cGU6ICdwdXQnLCBrZXk6ICduYW1lJywgdmFsdWU6ICdZdXJpIElyc2Vub3ZpY2ggS2ltJ30sXG4gICAgICAgICAgICB7dHlwZTogJ3B1dCcsIGtleTogJ2RvYicsIHZhbHVlOiAnMTYgRmVicnVhcnkgMTk0MSd9LFxuICAgICAgICAgICAge3R5cGU6ICdwdXQnLCBrZXk6ICdzcG91c2UnLCB2YWx1ZTogJ0tpbSBZb3VuZy1zb29rJ30sXG4gICAgICAgICAgICB7dHlwZTogJ3B1dCcsIGtleTogJ29jY3VwYXRpb24nLCB2YWx1ZTogJ0Nsb3duJ31cbiAgICAgICAgXTtcblxuICAgICAgICBkYi5iYXRjaChvcHMsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnQuZmFpbChlcnIpO1xuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFzc2VydCh0cnVlKTtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
