'use strict';
var assert = require('assert');
var DB = require('./').default;
var db = null;
describe('leveldb-plugin', function () {
    before(function () {
        db = new DB('db').sublevel('users');
    });
    after(function () {
        db.close();
    });
    it('should be defined', function () {
        assert(DB);
    });
    it('should create instance', function () {
        assert(db);
    });
    it('put() - should do put', function (done) {
        db.put('name', 'LevelUP', function (err) {
            if (err) {
                console.log('Ooops!', err);
                assert.fail(err);
                done();
            }
            done();
        });
    });
    it('createValueStream() - should get stream', function (done) {
        db.createValueStream().on('data', function (data) {
            assert(data);
            console.log('value=', data);
        });
        db.put('user-jonnie', 'jonnie', function (err) {
            done();
        });
    });
    it('get() - should get key value', function (done) {
        db.get('name', function (err, value) {
            assert(value);
            done();
        });
    });
    it('del() - should remove key value', function (done) {
        db.del('name', function (err, value) {
            assert(true);
            done();
        });
    });
    it('batch() - should do batch operation', function (done) {
        var ops = [
            { type: 'put', key: 'name', value: 'Yuri Irsenovich Kim' },
            { type: 'put', key: 'dob', value: '16 February 1941' },
            { type: 'put', key: 'spouse', value: 'Kim Young-sook' },
            { type: 'put', key: 'occupation', value: 'Clown' }
        ];
        db.batch(ops, function (err) {
            if (err) {
                assert.fail(err);
                done();
            }
            assert(true);
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbnMvbGV2ZWxkYi1wbHVnaW4vZGItc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFDYixJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDakMsSUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUNqQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUM7QUFFZCxRQUFRLENBQUMsZ0JBQWdCLEVBQUU7SUFFdkIsTUFBTSxDQUFDO1FBQ0gsRUFBRSxHQUFHLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4QyxDQUFDLENBQUMsQ0FBQztJQUNILEtBQUssQ0FBQztRQUNGLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNmLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG1CQUFtQixFQUFFO1FBQ3BCLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNmLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdCQUF3QixFQUFFO1FBQ3pCLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNmLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHVCQUF1QixFQUFFLFVBQVUsSUFBSTtRQUN0QyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsVUFBVSxHQUFHO1lBQ25DLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2pCLElBQUksRUFBRSxDQUFDO1lBQ1gsQ0FBQztZQUNELElBQUksRUFBRSxDQUFDO1FBQ1gsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRSxVQUFVLElBQUk7UUFDeEQsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFVLElBQUk7WUFDNUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUUsVUFBVSxHQUFHO1lBQ3pDLElBQUksRUFBRSxDQUFDO1FBQ1gsQ0FBQyxDQUFDLENBQUM7SUFFUCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw4QkFBOEIsRUFBRSxVQUFVLElBQUk7UUFDN0MsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsVUFBVSxHQUFHLEVBQUUsS0FBSztZQUUvQixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDZCxJQUFJLEVBQUUsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsaUNBQWlDLEVBQUUsVUFBVSxJQUFJO1FBQ2hELEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFVBQVUsR0FBRyxFQUFFLEtBQUs7WUFFL0IsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2IsSUFBSSxFQUFFLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHFDQUFxQyxFQUFFLFVBQVUsSUFBSTtRQUNwRCxJQUFJLEdBQUcsR0FBRztZQUNOLEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxxQkFBcUIsRUFBQztZQUN4RCxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsa0JBQWtCLEVBQUM7WUFDcEQsRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFDO1lBQ3JELEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUM7U0FDbkQsQ0FBQztRQUVGLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFVBQVUsR0FBRztZQUN2QixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNOLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2pCLElBQUksRUFBRSxDQUFDO1lBQ1gsQ0FBQztZQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNiLElBQUksRUFBRSxDQUFDO1FBQ1gsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InBsdWdpbnMvbGV2ZWxkYi1wbHVnaW4vZGItc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuY29uc3QgREIgPSByZXF1aXJlKCcuLycpLmRlZmF1bHQ7XG52YXIgZGIgPSBudWxsO1xuXG5kZXNjcmliZSgnbGV2ZWxkYi1wbHVnaW4nLCBmdW5jdGlvbiAoKSB7XG5cbiAgICBiZWZvcmUoZnVuY3Rpb24gKCkge1xuICAgICAgICBkYiA9IG5ldyBEQignZGInKS5zdWJsZXZlbCgndXNlcnMnKTtcbiAgICB9KTtcbiAgICBhZnRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRiLmNsb3NlKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGJlIGRlZmluZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFzc2VydChEQik7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBpbnN0YW5jZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXNzZXJ0KGRiKTtcbiAgICB9KTtcblxuICAgIGl0KCdwdXQoKSAtIHNob3VsZCBkbyBwdXQnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICBkYi5wdXQoJ25hbWUnLCAnTGV2ZWxVUCcsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnT29vcHMhJywgZXJyKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQuZmFpbChlcnIpO1xuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnY3JlYXRlVmFsdWVTdHJlYW0oKSAtIHNob3VsZCBnZXQgc3RyZWFtJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgZGIuY3JlYXRlVmFsdWVTdHJlYW0oKS5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBhc3NlcnQoZGF0YSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygndmFsdWU9JywgZGF0YSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRiLnB1dCgndXNlci1qb25uaWUnLCAnam9ubmllJywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG4gICAgaXQoJ2dldCgpIC0gc2hvdWxkIGdldCBrZXkgdmFsdWUnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICBkYi5nZXQoJ25hbWUnLCBmdW5jdGlvbiAoZXJyLCB2YWx1ZSkge1xuXG4gICAgICAgICAgICBhc3NlcnQodmFsdWUpO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdkZWwoKSAtIHNob3VsZCByZW1vdmUga2V5IHZhbHVlJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgZGIuZGVsKCduYW1lJywgZnVuY3Rpb24gKGVyciwgdmFsdWUpIHtcblxuICAgICAgICAgICAgYXNzZXJ0KHRydWUpO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdiYXRjaCgpIC0gc2hvdWxkIGRvIGJhdGNoIG9wZXJhdGlvbicsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgIHZhciBvcHMgPSBbXG4gICAgICAgICAgICB7dHlwZTogJ3B1dCcsIGtleTogJ25hbWUnLCB2YWx1ZTogJ1l1cmkgSXJzZW5vdmljaCBLaW0nfSxcbiAgICAgICAgICAgIHt0eXBlOiAncHV0Jywga2V5OiAnZG9iJywgdmFsdWU6ICcxNiBGZWJydWFyeSAxOTQxJ30sXG4gICAgICAgICAgICB7dHlwZTogJ3B1dCcsIGtleTogJ3Nwb3VzZScsIHZhbHVlOiAnS2ltIFlvdW5nLXNvb2snfSxcbiAgICAgICAgICAgIHt0eXBlOiAncHV0Jywga2V5OiAnb2NjdXBhdGlvbicsIHZhbHVlOiAnQ2xvd24nfVxuICAgICAgICBdO1xuXG4gICAgICAgIGRiLmJhdGNoKG9wcywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGFzc2VydC5mYWlsKGVycik7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXNzZXJ0KHRydWUpO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
