'use strict';
var path = require('path');
var assert = require('assert');
var Model = require('./model').default;
var Service = require('./service').default;
/**
 * TODO - Describe what your controller does.
 *
 * @class         Passes
 * @module        Passes
 * @constructor
 */
var service;
var PassesController = (function () {
    function PassesController(options) {
        console.log('PassesController Constructor');
        service = new Service();
    }
    PassesController.prototype.use = function (req, res, next) {
        console.log('Passes.use', req.method, req.url);
        next();
    };
    PassesController.prototype.all = function (req, res, next) {
        if (req.params.id) {
            req.id = req.params.id;
            console.log('Got id', req.id);
        }
        console.log('PassesController-controller.all', req.method, req.url);
        next();
    };
    PassesController.prototype.index = function (req, res, next) {
        next();
    };
    PassesController.prototype.get_route = function (req, res, next) {
        if (req.id) {
            service.get(req.id).then(function (resp) {
                res.status(200).send(resp);
            }).catch(function (err) {
                res.status(404).send(err);
            });
        }
        else {
            service.find(req.params).then(function (resp) {
                res.status(200).send(resp);
            }).catch(function (err) {
                res.status(404).send(err);
            });
        }
    };
    PassesController.prototype.post_route = function (req, res, next) {
        var m = new Model(req.body);
        console.log('creating', m);
        service.save(m).then(function (resp) {
            res.status(201).send(resp);
        }).catch(function (err) {
            res.status(404).send(err);
        });
    };
    PassesController.prototype.put_route = function (req, res, next) {
        assert(req.params.id, 'has id');
        var model = new Model(req.body);
        model.id = req.params.id;
        console.log('updating', req.params.id);
        service.save(model, function (err, resp) {
            res.status(200).send(resp);
        }).catch(function (err) {
            res.status(404).send(err);
        });
    };
    PassesController.prototype.delete_route = function (req, res, next) {
        assert(req.params.id, 'has id');
        console.log('removing', req.params.id);
        service.remove(req.params.id, function (err, resp) {
            res.status(200).send(resp);
        }).catch(function (err) {
            res.status(404).send(err);
        });
    };
    return PassesController;
}());
exports["default"] = PassesController;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbnMvcGFzc2VzL2NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2IsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqQyxJQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ3pDLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFFN0M7Ozs7OztHQU1HO0FBQ0gsSUFBSSxPQUFPLENBQUM7QUFDWjtJQU1FLDBCQUFZLE9BQVk7UUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCw4QkFBRyxHQUFILFVBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJO1FBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQy9DLElBQUksRUFBRSxDQUFDO0lBQ1QsQ0FBQztJQUVELDhCQUFHLEdBQUgsVUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUk7UUFDaEIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hDLENBQUM7UUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxD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LEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSTtRQUN6QixNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN2QyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLFVBQUMsR0FBRyxFQUFFLElBQUk7WUFDdEMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsR0FBRztZQUNYLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNILHVCQUFDO0FBQUQsQ0E5RUEsQUE4RUMsSUFBQTtBQTlFRCxxQ0E4RUMsQ0FBQSIsImZpbGUiOiJwbHVnaW5zL3Bhc3Nlcy9jb250cm9sbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuY29uc3QgTW9kZWwgPSByZXF1aXJlKCcuL21vZGVsJykuZGVmYXVsdDtcbmNvbnN0IFNlcnZpY2UgPSByZXF1aXJlKCcuL3NlcnZpY2UnKS5kZWZhdWx0O1xuXG4vKipcbiAqIFRPRE8gLSBEZXNjcmliZSB3aGF0IHlvdXIgY29udHJvbGxlciBkb2VzLlxuICpcbiAqIEBjbGFzcyAgICAgICAgIFBhc3Nlc1xuICogQG1vZHVsZSAgICAgICAgUGFzc2VzXG4gKiBAY29uc3RydWN0b3JcbiAqL1xubGV0IHNlcnZpY2U7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXNzZXNDb250cm9sbGVyIHtcblxuICAvL3NlcnZpY2U6U2VydmljZTtcbiAgbW9kZWw6IE1vZGVsO1xuICBjb2xsZWN0aW9uOiBhbnk7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogYW55KSB7XG4gICAgY29uc29sZS5sb2coJ1Bhc3Nlc0NvbnRyb2xsZXIgQ29uc3RydWN0b3InKTtcbiAgICBzZXJ2aWNlID0gbmV3IFNlcnZpY2UoKTtcbiAgfVxuXG4gIHVzZShyZXEsIHJlcywgbmV4dCkge1xuICAgIGNvbnNvbGUubG9nKCdQYXNzZXMudXNlJywgcmVxLm1ldGhvZCwgcmVxLnVybCk7XG4gICAgbmV4dCgpO1xuICB9XG5cbiAgYWxsKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgaWYgKHJlcS5wYXJhbXMuaWQpIHtcbiAgICAgIHJlcS5pZCA9IHJlcS5wYXJhbXMuaWQ7XG4gICAgICBjb25zb2xlLmxvZygnR290IGlkJywgcmVxLmlkKTtcbiAgICB9XG4gICAgY29uc29sZS5sb2coJ1Bhc3Nlc0NvbnRyb2xsZXItY29udHJvbGxlci5hbGwnLCByZXEubWV0aG9kLCByZXEudXJsKTtcbiAgICBuZXh0KCk7XG4gIH1cblxuICBpbmRleChyZXEsIHJlcywgbmV4dCkge1xuICAgIG5leHQoKTtcbiAgfVxuXG4gIGdldF9yb3V0ZShyZXEsIHJlcywgbmV4dCkge1xuICAgIGlmIChyZXEuaWQpIHtcbiAgICAgIHNlcnZpY2UuZ2V0KHJlcS5pZCkudGhlbigocmVzcCkgPT4ge1xuICAgICAgICByZXMuc3RhdHVzKDIwMCkuc2VuZChyZXNwKTtcbiAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoZXJyKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXJ2aWNlLmZpbmQocmVxLnBhcmFtcykudGhlbigocmVzcCkgPT4ge1xuICAgICAgICByZXMuc3RhdHVzKDIwMCkuc2VuZChyZXNwKTtcbiAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoZXJyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHBvc3Rfcm91dGUocmVxLCByZXMsIG5leHQpIHtcbiAgICBsZXQgbSA9IG5ldyBNb2RlbChyZXEuYm9keSk7XG4gICAgY29uc29sZS5sb2coJ2NyZWF0aW5nJywgbSk7XG5cbiAgICBzZXJ2aWNlLnNhdmUobSkudGhlbigocmVzcCkgPT4ge1xuICAgICAgcmVzLnN0YXR1cygyMDEpLnNlbmQocmVzcCk7XG4gICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoZXJyKTtcbiAgICB9KVxuICB9XG5cbiAgcHV0X3JvdXRlKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgYXNzZXJ0KHJlcS5wYXJhbXMuaWQsICdoYXMgaWQnKTtcbiAgICB2YXIgbW9kZWwgPSBuZXcgTW9kZWwocmVxLmJvZHkpO1xuICAgIG1vZGVsLmlkID0gcmVxLnBhcmFtcy5pZDtcblxuICAgIGNvbnNvbGUubG9nKCd1cGRhdGluZycsIHJlcS5wYXJhbXMuaWQpO1xuICAgIHNlcnZpY2Uuc2F2ZShtb2RlbCwgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgcmVzLnN0YXR1cygyMDApLnNlbmQocmVzcCk7XG4gICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoZXJyKTtcbiAgICB9KTtcbiAgfVxuXG4gIGRlbGV0ZV9yb3V0ZShyZXEsIHJlcywgbmV4dCkge1xuICAgIGFzc2VydChyZXEucGFyYW1zLmlkLCAnaGFzIGlkJyk7XG4gICAgY29uc29sZS5sb2coJ3JlbW92aW5nJywgcmVxLnBhcmFtcy5pZCk7XG4gICAgc2VydmljZS5yZW1vdmUocmVxLnBhcmFtcy5pZCwgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgcmVzLnN0YXR1cygyMDApLnNlbmQocmVzcCk7XG4gICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoZXJyKTtcbiAgICB9KTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
