'use strict';
var path = require('path');
var Model = require('./model.js').default;
var Service = require('./service.js').default;
/**
 * TODO - Describe what your controller does.
 *
 * @class         Passes
 * @module        Passes
 * @constructor
 */
var PassesController = (function () {
    function PassesController(options) {
        console.log('PassesController Constructor');
        this.service = new Service();
    }
    PassesController.prototype.use = function (req, res, next) {
        console.log('Time: ', Date.now());
        console.log('Passes.use', req.method, req.url);
        if (req.params.id) {
            req.id = req.params.id;
            console.log('Got id', req.id);
        }
        next();
    };
    PassesController.prototype.all = function (req, res, next) {
        console.log('-controller.all', req.method, req.url);
        next();
    };
    PassesController.prototype.index = function (req, res, next) {
        next();
    };
    PassesController.prototype.get_route = function (req, res, next) {
        if (req.id) {
            this.service.get(req.id).then(function (resp) {
                res.status(200).send(resp);
            }).catch(function (err) {
                res.status(404).send(err);
            });
        }
        else {
            this.service.find(req.params).then(function (resp) {
                res.status(200).send(resp);
            }).catch(function (err) {
                res.status(404).send(err);
            });
        }
    };
    PassesController.prototype.post_route = function (req, res, next) {
        var m = new Model(req.body);
        console.log('creating', m);
        this.service.save(m).then(function (resp) {
            res.status(201).send(resp);
        }).catch(function (err) {
            res.status(404).send(err);
        });
    };
    PassesController.prototype.put_route = function (req, res, next) {
        var model = new Model(req.body);
        model.id = req.id;
        console.log('updating', model);
        this.service.save(model, function (err, resp) {
            res.status(200).send(resp);
        }).catch(function (err) {
            res.status(404).send(err);
        });
    };
    PassesController.prototype.delete_route = function (req, res, next) {
        console.log('removing', req.id);
        this.service.remove(req.id, function (err, resp) {
            res.status(200).send(resp);
        }).catch(function (err) {
            res.status(404).send(err);
        });
    };
    return PassesController;
}());
exports["default"] = PassesController;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbnMvcGFzc2VzL2NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2IsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDNUMsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUVoRDs7Ozs7O0dBTUc7QUFDSDtJQU1JLDBCQUFZLE9BQVc7UUFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQUVqQyxDQUFDO0lBRUQsOEJBQUcsR0FBSCxVQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSTtRQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQy9DLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNoQixHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsQyxDQUFDO1FBQ0QsSUFBSSxFQUFFLENBQUM7SUFDWCxDQUFDO0lBRUQsOEJBQUcsR0FBSCxVQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSTtRQUVkLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFB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QUFHLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLFVBQUMsR0FBRyxFQUFFLElBQUk7WUFDbEMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsR0FBRztZQUNULEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNMLHVCQUFDO0FBQUQsQ0E5RUEsQUE4RUMsSUFBQTtBQTlFRCxxQ0E4RUMsQ0FBQSIsImZpbGUiOiJwbHVnaW5zL3Bhc3Nlcy9jb250cm9sbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IE1vZGVsID0gcmVxdWlyZSgnLi9tb2RlbC5qcycpLmRlZmF1bHQ7XG5jb25zdCBTZXJ2aWNlID0gcmVxdWlyZSgnLi9zZXJ2aWNlLmpzJykuZGVmYXVsdDtcblxuLyoqXG4gKiBUT0RPIC0gRGVzY3JpYmUgd2hhdCB5b3VyIGNvbnRyb2xsZXIgZG9lcy5cbiAqXG4gKiBAY2xhc3MgICAgICAgICBQYXNzZXNcbiAqIEBtb2R1bGUgICAgICAgIFBhc3Nlc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhc3Nlc0NvbnRyb2xsZXIge1xuXG4gICAgc2VydmljZTpTZXJ2aWNlO1xuICAgIG1vZGVsOk1vZGVsO1xuICAgIGNvbGxlY3Rpb246YW55O1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczphbnkpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1Bhc3Nlc0NvbnRyb2xsZXIgQ29uc3RydWN0b3InKTtcbiAgICAgICAgdGhpcy5zZXJ2aWNlID0gbmV3IFNlcnZpY2UoKTtcblxuICAgIH1cblxuICAgIHVzZShyZXEsIHJlcywgbmV4dCkge1xuICAgICAgICBjb25zb2xlLmxvZygnVGltZTogJywgRGF0ZS5ub3coKSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdQYXNzZXMudXNlJywgcmVxLm1ldGhvZCwgcmVxLnVybCk7XG4gICAgICAgIGlmIChyZXEucGFyYW1zLmlkKSB7XG4gICAgICAgICAgICByZXEuaWQgPSByZXEucGFyYW1zLmlkO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0dvdCBpZCcsIHJlcS5pZCk7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dCgpO1xuICAgIH1cblxuICAgIGFsbChyZXEsIHJlcywgbmV4dCkge1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCctY29udHJvbGxlci5hbGwnLCByZXEubWV0aG9kLCByZXEudXJsKTtcbiAgICAgICAgbmV4dCgpO1xuICAgIH1cblxuICAgIGluZGV4KHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgICAgIG5leHQoKTtcbiAgICB9XG5cbiAgICBnZXRfcm91dGUocmVxLCByZXMsIG5leHQpIHtcbiAgICAgICAgaWYgKHJlcS5pZCkge1xuICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLmdldChyZXEuaWQpLnRoZW4oKHJlc3ApPT4ge1xuICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHJlc3ApO1xuICAgICAgICAgICAgfSkuY2F0Y2goKGVycik9PiB7XG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLmZpbmQocmVxLnBhcmFtcykudGhlbigocmVzcCk9PiB7XG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1cygyMDApLnNlbmQocmVzcCk7XG4gICAgICAgICAgICB9KS5jYXRjaCgoZXJyKT0+IHtcbiAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDQwNCkuc2VuZChlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwb3N0X3JvdXRlKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgICAgIGxldCBtID0gbmV3IE1vZGVsKHJlcS5ib2R5KTtcbiAgICAgICAgY29uc29sZS5sb2coJ2NyZWF0aW5nJywgbSk7XG5cbiAgICAgICAgdGhpcy5zZXJ2aWNlLnNhdmUobSkudGhlbigocmVzcCk9PiB7XG4gICAgICAgICAgICByZXMuc3RhdHVzKDIwMSkuc2VuZChyZXNwKTtcbiAgICAgICAgfSkuY2F0Y2goKGVycik9PiB7XG4gICAgICAgICAgICByZXMuc3RhdHVzKDQwNCkuc2VuZChlcnIpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIHB1dF9yb3V0ZShyZXEsIHJlcywgbmV4dCkge1xuICAgICAgICB2YXIgbW9kZWwgPSBuZXcgTW9kZWwocmVxLmJvZHkpO1xuICAgICAgICBtb2RlbC5pZCA9IHJlcS5pZDtcbiAgICAgICAgY29uc29sZS5sb2coJ3VwZGF0aW5nJywgbW9kZWwpO1xuICAgICAgICB0aGlzLnNlcnZpY2Uuc2F2ZShtb2RlbCwgKGVyciwgcmVzcCk9PiB7XG4gICAgICAgICAgICByZXMuc3RhdHVzKDIwMCkuc2VuZChyZXNwKTtcbiAgICAgICAgfSkuY2F0Y2goKGVycik9PiB7XG4gICAgICAgICAgICByZXMuc3RhdHVzKDQwNCkuc2VuZChlcnIpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkZWxldGVfcm91dGUocmVxLCByZXMsIG5leHQpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3JlbW92aW5nJywgcmVxLmlkKTtcbiAgICAgICAgdGhpcy5zZXJ2aWNlLnJlbW92ZShyZXEuaWQsIChlcnIsIHJlc3ApPT4ge1xuICAgICAgICAgICAgcmVzLnN0YXR1cygyMDApLnNlbmQocmVzcCk7XG4gICAgICAgIH0pLmNhdGNoKChlcnIpPT4ge1xuICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
