'use strict';
var path = require('path');
var assert = require('assert');
var Model = require('./model').default;
var Service = require('./service').default;
/**
 * TODO - Describe what your controller does.
 *
 * @class         Passes
 * @module        Passes
 * @constructor
 */
var service;
var PassesController = (function () {
    function PassesController(options) {
        console.log('PassesController Constructor');
        service = new Service();
    }
    PassesController.prototype.use = function (req, res, next) {
        console.log('Passes.use', req.method, req.url, req.params);
        next();
    };
    PassesController.prototype.all = function (req, res, next) {
        if (req.params.id) {
            req.id = req.params.id;
            console.log('Got id', req.id);
        }
        console.log('PassesController-controller.all', req.method, req.url);
        next();
    };
    PassesController.prototype.index = function (req, res, next) {
        next();
    };
    PassesController.prototype.get_route = function (req, res, next) {
        if (req.id) {
            service.get(req.id).then(function (resp) {
                res.status(200).send(resp);
            }).catch(function (err) {
                res.status(404).send(err);
            });
        }
        else {
            service.find(req.params).then(function (resp) {
                res.status(200).send(resp);
            }).catch(function (err) {
                res.status(404).send(err);
            });
        }
    };
    PassesController.prototype.post_route = function (req, res, next) {
        var m = new Model(req.body);
        console.log('creating', m);
        service.save(m).then(function (resp) {
            res.status(201).send(resp);
        }).catch(function (err) {
            res.status(404).send(err);
        });
    };
    PassesController.prototype.put_route = function (req, res, next) {
        var model = new Model(req.body);
        console.log('updating', req.params.id);
        service.save(model).then(function (resp) {
            res.status(200).send(resp);
        }).catch(function (err) {
            res.status(404).send(err);
        });
    };
    PassesController.prototype.delete_route = function (req, res, next) {
        assert(req.params.id, 'has id');
        console.log('removing', req.params.id);
        service.remove(req.params.id).then(function (resp) {
            res.status(200).send(resp);
        }).catch(function (err) {
            res.status(404).send(err);
        });
    };
    return PassesController;
}());
exports["default"] = PassesController;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbnMvcGFzc2VzL2NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2IsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqQyxJQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ3pDLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFFN0M7Ozs7OztHQU1HO0FBQ0gsSUFBSSxPQUFPLENBQUM7QUFDWjtJQU1JLDBCQUFZLE9BQVc7UUFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCw4QkFBRyxHQUFILFVBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJO1FBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzRCxJQUFJLEVBQUUsQ0FBQztJQUNYLENBQUM7SUFFRCw4QkFBRyxHQUFILFVBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJO1FBQ2QsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xDLENBQUM7UUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsQ0FB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QUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXZDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxJQUFJO1lBQ3BDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFDLEdBQUc7WUFDVCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDTCx1QkFBQztBQUFELENBN0VBLEFBNkVDLElBQUE7QUE3RUQscUNBNkVDLENBQUEiLCJmaWxlIjoicGx1Z2lucy9wYXNzZXMvY29udHJvbGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbmNvbnN0IE1vZGVsID0gcmVxdWlyZSgnLi9tb2RlbCcpLmRlZmF1bHQ7XG5jb25zdCBTZXJ2aWNlID0gcmVxdWlyZSgnLi9zZXJ2aWNlJykuZGVmYXVsdDtcblxuLyoqXG4gKiBUT0RPIC0gRGVzY3JpYmUgd2hhdCB5b3VyIGNvbnRyb2xsZXIgZG9lcy5cbiAqXG4gKiBAY2xhc3MgICAgICAgICBQYXNzZXNcbiAqIEBtb2R1bGUgICAgICAgIFBhc3Nlc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmxldCBzZXJ2aWNlO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFzc2VzQ29udHJvbGxlciB7XG5cbiAgICAvL3NlcnZpY2U6U2VydmljZTtcbiAgICBtb2RlbDpNb2RlbDtcbiAgICBjb2xsZWN0aW9uOmFueTtcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6YW55KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdQYXNzZXNDb250cm9sbGVyIENvbnN0cnVjdG9yJyk7XG4gICAgICAgIHNlcnZpY2UgPSBuZXcgU2VydmljZSgpO1xuICAgIH1cblxuICAgIHVzZShyZXEsIHJlcywgbmV4dCkge1xuICAgICAgICBjb25zb2xlLmxvZygnUGFzc2VzLnVzZScsIHJlcS5tZXRob2QsIHJlcS51cmwsIHJlcS5wYXJhbXMpO1xuICAgICAgICBuZXh0KCk7XG4gICAgfVxuXG4gICAgYWxsKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgICAgIGlmIChyZXEucGFyYW1zLmlkKSB7XG4gICAgICAgICAgICByZXEuaWQgPSByZXEucGFyYW1zLmlkO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0dvdCBpZCcsIHJlcS5pZCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coJ1Bhc3Nlc0NvbnRyb2xsZXItY29udHJvbGxlci5hbGwnLCByZXEubWV0aG9kLCByZXEudXJsKTtcbiAgICAgICAgbmV4dCgpO1xuICAgIH1cblxuICAgIGluZGV4KHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgICAgIG5leHQoKTtcbiAgICB9XG5cbiAgICBnZXRfcm91dGUocmVxLCByZXMsIG5leHQpIHtcbiAgICAgICAgaWYgKHJlcS5pZCkge1xuICAgICAgICAgICAgc2VydmljZS5nZXQocmVxLmlkKS50aGVuKChyZXNwKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1cygyMDApLnNlbmQocmVzcCk7XG4gICAgICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VydmljZS5maW5kKHJlcS5wYXJhbXMpLnRoZW4oKHJlc3ApID0+IHtcbiAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDIwMCkuc2VuZChyZXNwKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDQwNCkuc2VuZChlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwb3N0X3JvdXRlKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgICAgIGxldCBtID0gbmV3IE1vZGVsKHJlcS5ib2R5KTtcbiAgICAgICAgY29uc29sZS5sb2coJ2NyZWF0aW5nJywgbSk7XG5cbiAgICAgICAgc2VydmljZS5zYXZlKG0pLnRoZW4oKHJlc3ApID0+IHtcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAxKS5zZW5kKHJlc3ApO1xuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICByZXMuc3RhdHVzKDQwNCkuc2VuZChlcnIpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIHB1dF9yb3V0ZShyZXEsIHJlcywgbmV4dCkge1xuICAgICAgICB2YXIgbW9kZWwgPSBuZXcgTW9kZWwocmVxLmJvZHkpO1xuICAgICAgICBjb25zb2xlLmxvZygndXBkYXRpbmcnLCByZXEucGFyYW1zLmlkKTtcblxuICAgICAgICBzZXJ2aWNlLnNhdmUobW9kZWwpLnRoZW4oKHJlc3ApID0+IHtcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHJlc3ApO1xuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICByZXMuc3RhdHVzKDQwNCkuc2VuZChlcnIpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkZWxldGVfcm91dGUocmVxLCByZXMsIG5leHQpIHtcbiAgICAgICAgYXNzZXJ0KHJlcS5wYXJhbXMuaWQsICdoYXMgaWQnKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3JlbW92aW5nJywgcmVxLnBhcmFtcy5pZCk7XG5cbiAgICAgICAgc2VydmljZS5yZW1vdmUocmVxLnBhcmFtcy5pZCkudGhlbigocmVzcCkgPT4ge1xuICAgICAgICAgICAgcmVzLnN0YXR1cygyMDApLnNlbmQocmVzcCk7XG4gICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoNDA0KS5zZW5kKGVycik7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
